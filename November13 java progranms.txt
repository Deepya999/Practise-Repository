46.
public int canCompleteCircuit(int[] gas, int[] cost) {
int sumRemaining = 0; // track current remaining int total = 0; // track total remaining int start = 0;
Program Creek
for (int i = 0; i < gas.length; i++) {
int remaining = gas[i] - cost[i];
//if sum remaining of (i-1) >= 0, continue if (sumRemaining >= 0) {
sumRemaining += remaining;
//otherwise, reset start index to be current
} else {
sumRemaining = remaining; start = i;
} total += remaining;
}
if (total >= 0){
return start;
}else{ return -1;
} }

47.
import java.io.*; 
  
class GFG { 
      
    
    static void printPascal(int n) 
    { 
          
    
    for (int line = 0; line < n; line++) 
    { 
       
        for (int i = 0; i <= line; i++) 
        System.out.print(binomialCoeff 
                        (line, i)+" "); 
                          
        System.out.println(); 
    } 
    } 
      
    
    static int binomialCoeff(int n, int k) 
    { 
        int res = 1; 
          
        if (k > n - k) 
        k = n - k; 
              
        for (int i = 0; i < k; ++i) 
        { 
            res *= (n - i); 
            res /= (i + 1); 
        } 
        return res; 
    } 
      
   
    public static void main(String args[]) 
    { 
    int n = 7; 
    printPascal(n); 
    } 
} 

48.

public List<Integer> getRow(int rowIndex) {
ArrayList<Integer> result = new ArrayList<Integer>();
if (rowIndex < 0)
return result;
result.add(1);
for (int i = 1; i <= rowIndex; i++) {
for (int j = result.size() - 2; j >= 0; j--) {
result.set(j + 1, result.get(j) + result.get(j + 1));
} result.add(1);
} return result;
}

49.

import java.util.*; 
  
class Area{ 
  
    public static int maxArea(int A[], int len) 
    { 
        int l = 0; 
        int r = len -1; 
        int area = 0; 
      
        while (l < r) 
        { 
            // Calculating the max area 
            area = Math.max(area,  
                        Math.min(A[l], A[r]) * (r - l)); 
                          
            if (A[l] < A[r]) 
                l += 1; 
                  
            else
                r -= 1; 
        } 
        return area; 
    } 
      
    public static void main(String[] args) 
    { 
        int a[] = {1, 5, 4, 3}; 
        int b[] = {3, 1, 2, 4, 5}; 
      
        int len1 = 4; 
        System.out.print( maxArea(a, len1)+"\n" ); 
      
        int len2 = 5; 
        System.out.print( maxArea(b, len2) ); 
    } 
} 

50.

class GFG  
{ 
  
    
    static String countnndSay(int n) 
    { 
    
    if (n == 1)     return "1"; 
    if (n == 2)     return "11"; 
  
   
      
    // Initialize previous term 
    String str = "11";  
    for (int i = 3; i <= n; i++) 
    { 
        
        str += '$'; 
        int len = str.length(); 
  
        int cnt = 1; // Initialize count  
                     // of matching chars 
        String tmp = ""; // Initialize i'th  
                         // term in series 
        char []arr = str.toCharArray(); 
          
        
        for (int j = 1; j < len; j++) 
        { 
           
            if (arr[j] != arr[j - 1]) 
            { 
                // Append count of  
                // str[j-1] to temp 
                tmp += cnt + 0; 
  
                // Append str[j-1] 
                tmp += arr[j - 1]; 
  
                // Reset count 
                cnt = 1; 
            } 
  
             
            else cnt++; 
        } 
  
        // Update str 
        str = tmp; 
    } 
  
    return str; 
    } 
      
  
    public static void main(String[] args) 
    { 
        int N = 3; 
        System.out.println(countnndSay(N)); 
    } 
} 
  